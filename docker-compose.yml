version: "3.8"

services:
  cloudflared:
    container_name: cloudflared
    # Restart on crashes and on reboots
    restart: always
    image: erisamoe/cloudflared:latest
    command: proxy-dns
    environment:
      - "TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query,https://9.9.9.9/dns-query,https://149.112.112.9/dns-query"

      # Listen on an unprivileged port
      - "TUNNEL_DNS_PORT=${CLOUDFLARED_PORT}"

      # Listen on all interfaces
      - "TUNNEL_DNS_ADDRESS=0.0.0.0"

    # Attach cloudflared only to the private network
    networks:
      internal:
        # Internal IP of the cloudflared container
        ipv4_address: ${CLOUDFLARED_INTERNAL_IP}

  pihole:
    container_name: pihole
    restart: always
    image: pihole/pihole:latest
    environment:
      - "TZ=America/Chicago"
      - "WEBPASSWORD=${PIHOLE_PASSWORD}"

      # Internal IP of the cloudflared container
      - "DNS1=${CLOUDFLARED_INTERNAL_IP}#${CLOUDFLARED_PORT}"

      # Explicitly disable a second DNS server, otherwise Pi-hole uses Google
      - "DNS2=no"

      # Listen on all interfaces and permit all origins
      # This allows Pihole to work in this setup and when answering across VLANS,
      # but do not expose pi-hole to the internet!
      - "DNSMASQ_LISTENING=all"

      # Enable query logging or not
      - QUERY_LOGGING=false
    # Persist data and custom configuration to the host's storage
    volumes:
      - "${PIHOLE_VOLUME_PATH}/config:/etc/pihole/"
      - "${PIHOLE_VOLUME_PATH}/dnsmasq:/etc/dnsmasq.d/"

    # 1. Join the internal network so Pi-hole can talk to cloudflared
    # 2. Join the public network so it's reachable by systems on our LAN
    networks:
      internal:
        # Internal IP of the pihole container
        ipv4_address: ${PIHOLE_INTERNAL_IP}
      priv_lan:
        # private LAN IP of the pihole container
        ipv4_address: ${PIHOLE_EXTERNAL_IP}

    # Starts cloudflared before Pi-hole
    depends_on:
      - cloudflared

networks:
  # Create the internal network
  internal:
    ipam:
      config:
        ## subnet of the internal network
        - subnet: ${INTERNAL_SUBNET}

  # The priv_lan network is already set up, so it is an 'external' network
  priv_lan:
    external:
      name: priv_lan
